name: Test WebCalendar Installation and Login

on:
  push:
    branches: [ master, release ]
  pull_request:
  release:
    types: [ published ]

jobs:
  test_installation:
    name: Test WebCalendar installation with SQLite
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # Use PHP 8.1 for sqlite3 support
          extensions: sqlite3, pdo_sqlite # sqlite3 is sufficient
          tools: none # No Composer needed
          ini-values: display_errors=On, error_reporting=E_ALL # Enable error reporting

      - name: Create SQLite database
        run: |
          mkdir -p database
          sqlite3 database/webcalendar.sqlite "VACUUM;" # Create empty SQLite DB
          ls -l database/webcalendar.sqlite # Debug: Verify DB file

      - name: Create settings.php from settings.php.orig
        run: |
          cp includes/settings.php.orig includes/settings.php
          sed -i 's|db_type:.*|db_type: sqlite3|' includes/settings.php
          sed -i 's|db_database:.*|db_database: ../database/webcalendar.sqlite|' includes/settings.php
          sed -i 's|db_host:.*|db_host: localhost|' includes/settings.php
          sed -i 's|db_login:.*|db_login: ""|' includes/settings.php
          sed -i 's|db_password:.*|db_password: ""|' includes/settings.php
          sed -i 's|install_password:.*|install_password: test123|' includes/settings.php
          sed -i 's|single_user:.*|single_user: false|' includes/settings.php
          sed -i 's|use_http_auth:.*|use_http_auth: false|' includes/settings.php
          sed -i 's|user_inc:.*|user_inc: user.php|' includes/settings.php
          echo "CSRF_PROTECTION: N" >> includes/settings.php # Disable CSRF for login test
          cat includes/settings.php # Debug: Show settings.php

      - name: Verify required files
        run: |
          ls -l install/sql/tables-sqlite3.php || { echo "Missing tables-sqlite3.php"; exit 1; }
          ls -l install/headless.php || { echo "Missing headless.php"; exit 1; }
          ls -l includes/dbi4php.php || { echo "Missing dbi4php.php"; exit 1; }
          ls -l includes/translate.php || { echo "Missing translate.php"; exit 1; }
          ls -l install/default_config.php || { echo "Missing default_config.php"; exit 1; }
          ls -l install/install_functions.php || { echo "Missing install_functions.php"; exit 1; }
          ls -l install/sql/upgrade_matrix.php || { echo "Missing upgrade_matrix.php"; exit 1; }

      - name: Create headless_debug.php
        run: |
          cat << 'EOF' > install/headless_debug.php
          <?php
          /* This script can be used to update the database headlessly rather than using the
           * installation script.
           *
           * You must copy the settings.php file from your original installation, or create it
           * yourself in the case of a new install. This script will not prompt you for any of
           * your settings; and requires settings.php to be present and complete.
           */
          ini_set('display_errors', 1);
          ini_set('display_startup_errors', 1);
          error_reporting(E_ALL);
          if (php_sapi_name() !== 'cli') {
              echo 'Error: This is a CLI script and should not be invoked via the web server' . PHP_EOL;
              exit(1);
          }
          // Start output buffering to prevent headers-sent warnings
          ob_start();
          $required_files = [
              __DIR__ . '/../includes/translate.php',
              __DIR__ . '/../includes/dbi4php.php',
              __DIR__ . '/../includes/config.php',
              __DIR__ . '/default_config.php',
              __DIR__ . '/install_functions.php',
              __DIR__ . '/sql/upgrade_matrix.php',
              __DIR__ . '/sql/tables-sqlite3.php'
          ];
          foreach ($required_files as $file) {
              if (!file_exists($file)) {
                  echo "Error: Missing required file: $file" . PHP_EOL;
                  ob_end_flush();
                  exit(1);
              }
              include_once $file;
          }
          define('__WC_BASEDIR', __DIR__ . '/../');
          $fileDir = __WC_BASEDIR . 'includes';
          $file    = $fileDir . '/settings.php';
          chdir(__WC_BASEDIR);
          if (!file_exists($file)) {
              echo "Error: settings.php not found at $file" . PHP_EOL;
              ob_end_flush();
              exit(1);
          }
          echo "Starting session..." . PHP_EOL;
          session_name(getSessionName());
          session_start();
          // Output included files after session start
          foreach ($required_files as $file) {
              echo "Included file: $file" . PHP_EOL;
          }
          // Flush output buffer after session start
          ob_end_flush();
          echo "Loading configuration..." . PHP_EOL;
          do_config(true);
          $db_database = $settings['db_database'] ?? '';
          $db_host     = $settings['db_host'] ?? '';
          $db_login    = $settings['db_login'] ?? '';
          $db_password = (empty($settings['db_password']) ? '' : $settings['db_password']);
          $db_persistent = false;
          $db_type       = $settings['db_type'] ?? '';
          $real_db       = ($db_type == 'sqlite' || $db_type == 'sqlite3'
              ? get_full_include_path($db_database) : $db_database);
          if (empty($db_type)) {
              echo "Error: db_type not set in settings.php" . PHP_EOL;
              exit(1);
          }
          echo "Attempting database connection (db_type: $db_type, db: $real_db)..." . PHP_EOL;
          $c = null;
          $dbVersion = null;
          $detectedDbVersion = 'Unknown';
          $canConnectDb = false;
          $connectError = '';
          try {
              $c = dbi_connect($db_host, $db_login, $db_password, $real_db, false);
              if ($c) {
                  $dbVersion = $detectedDbVersion = getDatabaseVersionFromSchema();
                  $canConnectDb = true;
                  echo "Database connection successful. Detected version: $detectedDbVersion" . PHP_EOL;
              } else {
                  $connectError = dbi_error();
                  echo "Error: Failed to connect to database: $connectError" . PHP_EOL;
                  exit(1);
              }
          } catch (Exception $e) {
              $connectError = $e->getMessage();
              echo "Error: Database connection exception: $connectError" . PHP_EOL;
              exit(1);
          }
          $emptyDatabase = $canConnectDb ? isEmptyDatabase() : true;
          echo "Empty database check: $emptyDatabase, db_type: $db_type, install_file: " . ($_SESSION['install_file'] ?? 'not set') . PHP_EOL;
          if ($emptyDatabase && $db_type === 'sqlite3') {
              $install_filename = 'install/sql/tables-sqlite3.php';
              echo "Executing SQLite3 installation: $install_filename" . PHP_EOL;
              if (!file_exists($install_filename)) {
                  echo "Error: Install file $install_filename not found" . PHP_EOL;
                  exit(1);
              }
              // File is already included, so just call the function
              try {
                  echo "Starting table creation..." . PHP_EOL;
                  populate_sqlite_db($real_db, $c);
                  echo "SQLite database tables created successfully" . PHP_EOL;
                  // Verify table creation
                  $tables = dbi_query("SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_user';");
                  if ($tables && dbi_fetch_row($tables)) {
                      echo "Verified: webcal_user table exists" . PHP_EOL;
                  } else {
                      echo "Error: webcal_user table not created" . PHP_EOL;
                      exit(1);
                  }
                  // Set initial version for new database
                  echo "Setting initial database version..." . PHP_EOL;
                  // Fallback for PROGRAM_VERSION if undefined
                  if (!isset($PROGRAM_VERSION)) {
                      $PROGRAM_VERSION = 'v1.9.12'; // Match latest version
                      echo "Warning: PROGRAM_VERSION not set, using default: $PROGRAM_VERSION" . PHP_EOL;
                  }
                  updateVersionInDatabase();
                  $detectedDbVersion = getDatabaseVersionFromSchema();
                  echo "Version set to: $detectedDbVersion" . PHP_EOL;
              } catch (Exception $e) {
                  echo "Error: Failed to populate SQLite database: " . $e->getMessage() . PHP_EOL;
                  echo "Last SQL error: " . dbi_error() . PHP_EOL;
                  exit(1);
              }
          } else {
              echo "Error: Table creation skipped. Reasons: emptyDatabase=$emptyDatabase, db_type=$db_type, install_file=" . ($_SESSION['install_file'] ?? 'not set') . PHP_EOL;
              exit(1);
          }
          echo "Checking passwords..." . PHP_EOL;
          $res = dbi_execute(
              'SELECT cal_login, cal_passwd FROM webcal_user',
              [],
              false,
              true
          );
          if ($res) {
              while ($row = dbi_fetch_row($res)) {
                  if (strlen($row[1]) < 30) {
                      echo "Updating password for user: {$row[0]}" . PHP_EOL;
                      dbi_execute('UPDATE webcal_user SET cal_passwd = ? WHERE cal_login = ?',
                          [password_hash($row[1], PASSWORD_DEFAULT), $row[0]]);
                  }
              }
              dbi_free_result($res);
          } else {
              echo "Error: Failed to query webcal_user: " . dbi_error() . PHP_EOL;
          }
          require_once "sql/upgrade-sql.php";
          $error = '';
          echo "Detected database schema version: $detectedDbVersion" . PHP_EOL;
          try {
              $success = true;
              if (empty($error)) {
                  if ($emptyDatabase && $db_type === 'sqlite3') {
                      echo "New SQLite3 database, skipping upgrades..." . PHP_EOL;
                      // Version already set, no upgrades needed
                  } else {
                      $sqlLines = getSqlUpdates($detectedDbVersion, $db_type, true);
                      foreach ($sqlLines as $sql) {
                          if (str_starts_with($sql, "function:")) {
                              list(, $functionName) = explode(':', $sql);
                              if (function_exists($functionName)) {
                                  echo "Executing function: $functionName" . PHP_EOL;
                                  $functionName();
                              } else {
                                  $error = "Function $functionName does not exist.";
                                  echo "Error: $error" . PHP_EOL;
                                  $success = false;
                              }
                          } else {
                              // Skip MySQL-specific MODIFY COLUMN for SQLite
                              if ($db_type === 'sqlite3' && preg_match('/ALTER TABLE.*MODIFY COLUMN/i', $sql)) {
                                  echo "Skipping MySQL-specific SQL for SQLite: $sql" . PHP_EOL;
                                  continue;
                              }
                              echo "Executing SQL: $sql" . PHP_EOL;
                              $ret = dbi_execute($sql, [], false, true);
                              if (!$ret) {
                                  $success = false;
                                  $error = dbi_error();
                                  echo "Error: SQL execution failed: $error" . PHP_EOL;
                              }
                          }
                      }
                  }
              }
          } catch (Exception $e) {
              $error = $e->getMessage();
              echo "Error: Exception during SQL updates: $error" . PHP_EOL;
          }
          if (empty($error)) {
              updateVersionInDatabase();
              $msg = translate('Database successfully migrated from XXX to YYY');
              $msg = str_replace('XXX', $detectedDbVersion, $msg);
              $msg = str_replace('YYY', $PROGRAM_VERSION, $msg);
              echo $msg . PHP_EOL;
          }
          if (empty($error)) {
              echo "Success" . PHP_EOL;
          } else {
              echo "Error: $error" . PHP_EOL;
              exit(1);
          }
          ?>
          EOF

      - name: Create run_install.php
        run: |
          cat << 'EOF' > run_install.php
          <?php
          ini_set('display_errors', 1);
          ini_set('display_startup_errors', 1);
          error_reporting(E_ALL);
          require 'install/headless_debug.php';
          $_SESSION['install_file'] = 'install/sql/tables-sqlite3.php';
          ?>
          EOF

      - name: Run WebCalendar installation
        run: |
          php run_install.php | tee install.log || { echo "PHP execution failed"; cat install.log; exit 1; }
          cat install.log # Debug: Always show install.log
          grep -q "Success" install.log || { echo "Installation failed: 'Success' not found"; cat install.log; exit 1; }

      - name: Verify database installation
        run: |
          # Check if core tables exist
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_config';" | grep webcal_config
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_entry';" | grep webcal_entry
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_user';" | grep webcal_user
          # Verify version in database
          sqlite3 database/webcalendar.sqlite "SELECT cal_value FROM webcal_config WHERE cal_setting='WEBCAL_PROGRAM_VERSION';" | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+'
          # Debug admin user password
          sqlite3 database/webcalendar.sqlite "SELECT cal_login, cal_passwd FROM webcal_user WHERE cal_login='admin';" || { echo "Failed to query webcal_user"; exit 1; }
          # Debug STARTVIEW setting
          sqlite3 database/webcalendar.sqlite "SELECT cal_setting, cal_value FROM webcal_config WHERE cal_setting='STARTVIEW';" || echo "No STARTVIEW setting found"
          sqlite3 database/webcalendar.sqlite "SELECT cal_login, cal_setting, cal_value FROM webcal_user_pref WHERE cal_login='admin' AND cal_setting='STARTVIEW';" || echo "No admin STARTVIEW preference found"

      - name: Check session save path
        run: |
          php -r 'echo "Session save path: " . session_save_path() . "\n";'
          if [ ! -w "$(php -r 'echo session_save_path();')" ]; then
            echo "Error: Session save path is not writable"
            exit 1
          fi

      - name: Test web-based login
        run: |
          # Start PHP server in background
          php -S localhost:8000 -t . > php_server.log 2>&1 &
          sleep 5  # Wait for server to start

          # Create a cookie jar to store session cookies
          COOKIE_JAR=cookies.txt
          touch $COOKIE_JAR

          # POST to login.php with admin credentials and action=login
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o login_response.html -w "%{http_code}" -X POST \
            http://localhost:8000/login.php -d "login=admin&password=admin&action=login")
          
          # Verify login success (HTTP 302 for redirect)
          if [ "$http_code" != "302" ]; then
            echo "Login failed, expected HTTP 302, got $http_code"
            cat login_response.html
            cat php_server.log
            exit 1
          fi
          echo "Login successful, received HTTP 302"

          # Explicitly request month.php to follow index.php redirect
          month_code=$(curl -s -L -b $COOKIE_JAR -c $COOKIE_JAR -o month_response.html -w "%{http_code}" \
            http://localhost:8000/month.php)
          
          # Verify month.php returns HTTP 200 and contains calendar content
          if [ "$month_code" != "200" ]; then
            echo "Failed to access month.php, expected HTTP 200, got $month_code"
            cat month_response.html
            cat php_server.log
            exit 1
          fi
          if grep -qi "Fatal Error" month_response.html; then
            echo "Error: month.php contains 'Fatal Error'"
            cat month_response.html
            cat php_server.log
            exit 1
          fi
          if ! grep -qi "WebCalendar\|calendar\|class=\"main\"" month_response.html; then
            echo "Error: month.php does not contain expected content (WebCalendar, calendar, or class=\"main\")"
            cat month_response.html
            cat php_server.log
            exit 1
          fi
          echo "Successfully accessed month.php"

          # Clean up
          kill $(pgrep -f "php -S localhost:8000") || true