name: Test WebCalendar Web-Based Installer

on:
  push:
    branches: [ master, release ]
  pull_request:
  release:
    types: [ published ]

jobs:
  web_installation:
    name: Test WebCalendar web-based installer with SQLite
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # Use PHP 8.1 for sqlite3 support
          extensions: sqlite3, pdo_sqlite # sqlite3 is sufficient
          tools: none # No Composer needed
          ini-values: display_errors=On, error_reporting=E_ALL # Enable error reporting

      - name: Create SQLite database
        run: |
          mkdir -p database
          sqlite3 database/webcalendar.sqlite "VACUUM;" # Create empty SQLite DB
          ls -l database/webcalendar.sqlite # Debug: Verify DB file

      - name: Create settings.php from settings.php.orig
        run: |
          cp includes/settings.php.orig includes/settings.php
          sed -i 's|db_type:.*|db_type: sqlite3|' includes/settings.php
          sed -i 's|db_database:.*|db_database: ../database/webcalendar.sqlite|' includes/settings.php
          sed -i 's|db_host:.*|db_host: localhost|' includes/settings.php
          sed -i 's|db_login:.*|db_login: ""|' includes/settings.php
          sed -i 's|db_password:.*|db_password: ""|' includes/settings.php
          sed -i 's|install_password:.*|install_password: test123|' includes/settings.php
          sed -i 's|single_user:.*|single_user: false|' includes/settings.php
          sed -i 's|use_http_auth:.*|use_http_auth: false|' includes/settings.php
          sed -i 's|user_inc:.*|user_inc: user.php|' includes/settings.php
          echo "CSRF_PROTECTION: N" >> includes/settings.php # Disable CSRF for installer
          cat includes/settings.php # Debug: Show settings.php

      - name: Verify required files
        run: |
          ls -l install/sql/tables-sqlite3.php || { echo "Missing tables-sqlite3.php"; exit 1; }
          ls -l install/headless.php || { echo "Missing headless.php"; exit 1; }
          ls -l includes/dbi4php.php || { echo "Missing dbi4php.php"; exit 1; }
          ls -l includes/translate.php || { echo "Missing translate.php"; exit 1; }
          ls -l install/default_config.php || { echo "Missing default_config.php"; exit 1; }
          ls -l install/install_functions.php || { echo "Missing install_functions.php"; exit 1; }
          ls -l install/sql/upgrade_matrix.php || { echo "Missing upgrade_matrix.php"; exit 1; }

      - name: Start PHP server
        run: |
          php -S localhost:8000 -t . > php_server.log 2>&1 &
          sleep 5 # Wait for server to start

      - name: Run web-based installer with cURL
        run: |
          COOKIE_JAR=cookies.txt
          touch $COOKIE_JAR

          # Step 1: GET install/index.php to start installer and capture CSRF token
          RESPONSE=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR http://localhost:8000/install/index.php -o step1_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step1_response.html || echo "")
          if [ -z "$CSRF_TOKEN" ]; then
            echo "Error: Could not extract CSRF token from install/index.php"
            cat step1_response.html
            cat php_server.log
            exit 1
          fi
          echo "Extracted CSRF token: $CSRF_TOKEN"

          # Step 2: POST to welcome/action (assuming it's the first form)
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o step2_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=welcome&csrf_form_key=$CSRF_TOKEN")
          if [ "$http_code" != "302" ]; then
            echo "Failed welcome step, expected HTTP 302, got $http_code"
            cat step2_response.html
            cat php_server.log
            exit 1
          fi

          # Step 3: POST to phpsettings/action
          RESPONSE=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR http://localhost:8000/install/index.php?action=phpsettings -o step3_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step3_response.html || echo "")
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o step3_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=phpsettings&csrf_form_key=$CSRF_TOKEN")
          if [ "$http_code" != "302" ]; then
            echo "Failed phpsettings step, expected HTTP 302, got $http_code"
            cat step3_response.html
            cat php_server.log
            exit 1
          fi

          # Step 4: POST to appsettings/action
          RESPONSE=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR http://localhost:8000/install/index.php?action=appsettings -o step4_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step4_response.html || echo "")
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o step4_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=appsettings&user_inc=user.php&csrf_form_key=$CSRF_TOKEN")
          if [ "$http_code" != "302" ]; then
            echo "Failed appsettings step, expected HTTP 302, got $http_code"
            cat step4_response.html
            cat php_server.log
            exit 1
          fi

          # Step 5: POST to dbsettings/action (main DB config, simulate AJAX test)
          RESPONSE=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR http://localhost:8000/install/index.php?action=dbsettings -o step5_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step5_response.html || echo "")
          # Simulate AJAX DB test (optional, but to mimic)
          ajax_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o ajax_response.json -w "%{http_code}" -X POST http://localhost:8000/install/install_ajax.php -d "dbType=sqlite3&server=localhost&login=&password=&dbName=../database/webcalendar.sqlite&dbCacheDir=&request=test-db-connection&csrf_form_key=$CSRF_TOKEN")
          if [ "$ajax_code" != "200" ]; then
            echo "Failed AJAX DB test, expected HTTP 200, got $ajax_code"
            cat ajax_response.json
            cat php_server.log
            exit 1
          fi
          # Submit DB config form
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o step5_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=dbsettings&db_type=sqlite3&db_host=localhost&db_login=&db_password=&db_database=../database/webcalendar.sqlite&db_cachedir=&db_debug=N&csrf_form_key=$CSRF_TOKEN")
          if [ "$http_code" != "302" ]; then
            echo "Failed dbsettings step, expected HTTP 302, got $http_code"
            cat step5_response.html
            cat php_server.log
            exit 1
          fi

          # Step 6: POST to createdb/action
          RESPONSE=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR http://localhost:8000/install/index.php?action=createdb -o step6_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step6_response.html || echo "")
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o step6_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=createdb&csrf_form_key=$CSRF_TOKEN")
          if [ "$http_code" != "302" ]; then
            echo "Failed createdb step, expected HTTP 302, got $http_code"
            cat step6_response.html
            cat php_server.log
            exit 1
          fi

          # Step 7: POST to dbtables/action
          RESPONSE=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR http://localhost:8000/install/index.php?action=dbtables -o step7_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step7_response.html || echo "")
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o step7_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=dbtables&csrf_form_key=$CSRF_TOKEN")
          if [ "$http_code" != "302" ]; then
            echo "Failed dbtables step, expected HTTP 302, got $http_code"
            cat step7_response.html
            cat php_server.log
            exit 1
          fi

          # Step 8: POST to adminuser/action
          RESPONSE=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR http://localhost:8000/install/index.php?action=adminuser -o step8_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step8_response.html || echo "")
          http_code=$(curl -s -c $COOKIE_JAR -b $COOKIE_JAR -o step8_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=adminuser&csrf_form_key=$CSRF_TOKEN")
          if [ "$http_code" != "302" ]; then
            echo "Failed adminuser step, expected HTTP 302, got $http_code"
            cat step8_response.html
            cat php_server.log
            exit 1
          fi

          # Step 9: GET finish page
          finish_code=$(curl -s -L -b $COOKIE_JAR -c $COOKIE_JAR -o step9_response.html -w "%{http_code}" http://localhost:8000/install/index.php?action=finish)
          if [ "$finish_code" != "200" ]; then
            echo "Failed finish step, expected HTTP 200, got $finish_code"
            cat step9_response.html
            cat php_server.log
            exit 1
          fi
          if ! grep -qi "Launch WebCalendar" step9_response.html; then
            echo "Error: finish page does not contain expected content"
            cat step9_response.html
            cat php_server.log
            exit 1
          fi
          echo "Web-based installer completed successfully"

      - name: Verify database installation
        run: |
          # Check if core tables exist
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_config';" | grep webcal_config
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_entry';" | grep webcal_entry
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_user';" | grep webcal_user
          # Verify version in database
          sqlite3 database/webcalendar.sqlite "SELECT cal_value FROM webcal_config WHERE cal_setting='WEBCAL_PROGRAM_VERSION';" | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+'
          # Debug admin user password
          sqlite3 database/webcalendar.sqlite "SELECT cal_login, cal_passwd FROM webcal_user WHERE cal_login='admin';" || { echo "Failed to query webcal_user"; exit 1; }

      - name: Clean up
        run: |
          kill $(pgrep -f "php -S localhost:8000") || true
