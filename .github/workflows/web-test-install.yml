name: Test WebCalendar Web-Based Installer

on:
  push:
    branches: [ master, release ]
  pull_request:
  release:
    types: [ published ]

jobs:
  web_installation:
    name: Test WebCalendar web-based installer with SQLite
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # Use PHP 8.1 for sqlite3 support
          extensions: sqlite3, pdo_sqlite # sqlite3 is sufficient
          tools: none # No Composer needed
          ini-values: display_errors=On, error_reporting=E_ALL, session.gc_maxlifetime=3600 # Enable error reporting, increase session timeout

      - name: Create SQLite database
        run: |
          mkdir -p database
          sqlite3 database/webcalendar.sqlite "VACUUM;" # Create empty SQLite DB
          ls -l database/webcalendar.sqlite # Debug: Verify DB file

      - name: Create empty settings.php
        run: |
          touch includes/settings.php
          echo "" > includes/settings.php # Ensure empty settings.php
          ls -l includes/settings.php # Debug: Verify file

      - name: Verify required files
        run: |
          ls -l install/sql/tables-sqlite3.php || { echo "Missing tables-sqlite3.php"; exit 1; }
          ls -l install/headless.php || { echo "Missing headless.php"; exit 1; }
          ls -l includes/dbi4php.php || { echo "Missing dbi4php.php"; exit 1; }
          ls -l includes/translate.php || { echo "Missing translate.php"; exit 1; }
          ls -l install/default_config.php || { echo "Missing default_config.php"; exit 1; }
          ls -l install/install_functions.php || { echo "Missing install_functions.php"; exit 1; }
          ls -l install/sql/upgrade_matrix.php || { echo "Missing upgrade_matrix.php"; exit 1; }
          ls -l install/install_auth_handler.php || { echo "Missing install_auth_handler.php"; exit 1; }

      - name: Start PHP server
        run: |
          php -S localhost:8000 -t . > php_server.log 2>&1 &
          sleep 10 # Wait longer for server stability

      - name: Run web-based installer with cURL
        run: |
          set -x # Enable debug output
          COOKIE_JAR=cookies.txt
          touch $COOKIE_JAR
          echo "Cookie jar created: $COOKIE_JAR"
          REDIRECT_COUNT=0
          MAX_REDIRECTS=5

          # Step 1: GET install/index.php to start installer and capture CSRF token
          RESPONSE=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php -o step1_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step1_response.html || echo "")
          if [ -z "$CSRF_TOKEN" ]; then
            echo "Error: Could not extract CSRF token from install/index.php"
            cat step1_response.html
            cat php_server.log
            exit 1
          fi
          echo "Extracted CSRF token: $CSRF_TOKEN"
          echo "Cookie jar contents after index.php:"
          cat $COOKIE_JAR

          # Step 2: GET auth page (welcome links to auth via GET)
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php?action=auth -o step2_response.html -w "%{http_code}" --dump-header headers.txt)
          if [ "$http_code" != "200" ]; then
            echo "Failed auth GET, expected HTTP 200, got $http_code"
            cat step2_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Auth GET redirect: $(grep -i location headers.txt || echo 'No redirect')"
          echo "Cookie jar contents after auth GET:"
          cat $COOKIE_JAR

          # Step 3: POST to auth/action
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step2_response.html || echo "")
          if [ -z "$CSRF_TOKEN" ]; then
            echo "Error: Could not extract CSRF token from auth step"
            cat step2_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step3_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=auth&password=test123&password2=test123&hint=&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$http_code" != "302" ]; then
            echo "Failed auth POST, expected HTTP 302, got $http_code"
            cat step3_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Auth POST redirect: $(grep -i location headers.txt)"
          echo "Cookie jar contents after auth POST:"
          cat $COOKIE_JAR

          # Check for redirect loop
          REDIRECT_COUNT=$((REDIRECT_COUNT + 1))
          if [ "$REDIRECT_COUNT" -ge "$MAX_REDIRECTS" ]; then
            echo "Error: Detected redirect loop (exceeded $MAX_REDIRECTS redirects)"
            cat headers.txt
            cat php_server.log
            exit 1
          fi

          # Step 4: POST to phpsettings/action
          RESPONSE=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php?action=phpsettings -o step4_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step4_response.html || echo "")
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step4_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=phpsettings&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$http_code" != "302" ]; then
            echo "Failed phpsettings step, expected HTTP 302, got $http_code"
            cat step4_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Phpsettings POST redirect: $(grep -i location headers.txt)"

          # Check for redirect loop
          REDIRECT_COUNT=$((REDIRECT_COUNT + 1))
          if [ "$REDIRECT_COUNT" -ge "$MAX_REDIRECTS" ]; then
            echo "Error: Detected redirect loop (exceeded $MAX_REDIRECTS redirects)"
            cat headers.txt
            cat php_server.log
            exit 1
          fi

          # Step 5: POST to appsettings/action
          RESPONSE=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php?action=appsettings -o step5_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step5_response.html || echo "")
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step5_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=appsettings&user_inc=user.php&mode=prod&single_user_login=admin&readonly=N&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$http_code" != "302" ]; then
            echo "Failed appsettings step, expected HTTP 302, got $http_code"
            cat step5_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Appsettings POST redirect: $(grep -i location headers.txt)"

          # Step 6: POST to dbsettings/action (main DB config, simulate AJAX test)
          RESPONSE=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php?action=dbsettings -o step6_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step6_response.html || echo "")
          # Simulate AJAX DB test
          ajax_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o ajax_response.json -w "%{http_code}" -X POST http://localhost:8000/install/install_ajax.php -d "dbType=sqlite3&server=localhost&login=&password=&dbName=../database/webcalendar.sqlite&dbCacheDir=&request=test-db-connection&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$ajax_code" != "200" ]; then
            echo "Failed AJAX DB test, expected HTTP 200, got $ajax_code"
            cat ajax_response.json
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          # Submit DB config form
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step6_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=dbsettings&db_type=sqlite3&db_host=localhost&db_login=&db_password=&db_database=../database/webcalendar.sqlite&db_cachedir=&db_debug=N&dbaction=save&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$http_code" != "302" ]; then
            echo "Failed dbsettings step, expected HTTP 302, got $http_code"
            cat step6_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Dbsettings POST redirect: $(grep -i location headers.txt)"

          # Step 7: POST to createdb/action
          RESPONSE=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php?action=createdb -o step7_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step7_response.html || echo "")
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step7_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=createdb&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$http_code" != "302" ]; then
            echo "Failed createdb step, expected HTTP 302, got $http_code"
            cat step7_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Createdb POST redirect: $(grep -i location headers.txt)"

          # Step 8: POST to dbtables/action
          RESPONSE=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php?action=dbtables -o step8_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step8_response.html || echo "")
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step8_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=dbtables&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$http_code" != "302" ]; then
            echo "Failed dbtables step, expected HTTP 302, got $http_code"
            cat step8_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Dbtables POST redirect: $(grep -i location headers.txt)"

          # Step 9: POST to adminuser/action
          RESPONSE=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" http://localhost:8000/install/index.php?action=adminuser -o step9_response.html)
          CSRF_TOKEN=$(grep -oP 'name="csrf_form_key" value="\K[^"]+' step9_response.html || echo "")
          http_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step9_response.html -w "%{http_code}" -X POST http://localhost:8000/install/index.php -d "action=adminuser&csrf_form_key=$CSRF_TOKEN" --dump-header headers.txt)
          if [ "$http_code" != "302" ]; then
            echo "Failed adminuser step, expected HTTP 302, got $http_code"
            cat step9_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Adminuser POST redirect: $(grep -i location headers.txt)"

          # Step 10: GET finish page
          finish_code=$(curl -s -L -c $COOKIE_JAR -b $COOKIE_JAR --cookie "PHPSESSID=install_session;path=/install" -o step10_response.html -w "%{http_code}" http://localhost:8000/install/index.php?action=finish --dump-header headers.txt)
          echo "Finish HTTP status: $finish_code"
          echo "Finish redirect: $(grep -i location headers.txt || echo 'No redirect')"
          if [ "$finish_code" != "200" ]; then
            echo "Failed finish step, expected HTTP 200, got $finish_code"
            cat step10_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          if ! grep -qi -E "The installation is complete|launch WebCalendar" step10_response.html; then
            echo "Error: finish page does not contain expected content"
            cat step10_response.html
            cat headers.txt
            cat php_server.log
            exit 1
          fi
          echo "Web-based installer completed successfully"

      - name: Verify database installation
        run: |
          # Check if core tables exist
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_config';" | grep webcal_config
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_entry';" | grep webcal_entry
          sqlite3 database/webcalendar.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='webcal_user';" | grep webcal_user
          # Verify version in database
          sqlite3 database/webcalendar.sqlite "SELECT cal_value FROM webcal_config WHERE cal_setting='WEBCAL_PROGRAM_VERSION';" | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+'
          # Debug admin user
          sqlite3 database/webcalendar.sqlite "SELECT cal_login, cal_is_admin FROM webcal_user WHERE cal_login='admin' AND cal_is_admin='Y';" || { echo "Failed to query admin user"; exit 1; }

      - name: Upload installer logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: installer-logs
          path: |
            *.html
            *.log
            *.json
            headers.txt
            cookies.txt
          retention-days: 5

      - name: Clean up
        run: |
          kill $(pgrep -f "php -S localhost:8000") || true