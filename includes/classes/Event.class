<?php
/**
 * Declares the Event class.
 *
 * @author Adam Roben <adam.roben@gmail.com>
 * @copyright Craig Knudsen, <cknudsen@cknudsen.com>, http://www.k5n.us/cknudsen
 * @license http://www.gnu.org/licenses/gpl.html GNU GPL
 * @version $Id$
 * @package WebCalendar
 * @subpackage Events
 */

/**
 * An event parameter object.
 *
 * This is a parameter object. It only has simple accessors.
 */
class Event {
  /**
   * The event's name.
   * @var string
   * @access private
   */
  var $_name;
  /**
   * The event's description.
   * @var string
   * @access private
   */
  var $_description;
  /**
   * The event's date (in YYYYMMDD format).
   * @var string
   * @access private
   */
  var $_date;
  /**
   * The event's time (in HHMMSS format).
   * @var string
   * @access private
   */
  var $_time;
  /**
   * The event's ID.
   * @var int
   * @access private
   */
  var $_id;
  /**
   * Extension ID.
   *
   * If this event is an extension of an event that carried over into the
   * current date, <var>$_extForID</var> will hold the original event's date.
   *
   * @var mixed
   * @access private
   */
  var $_extForID;
  /**
   * The event's priority.
   * @var int
   * @access private
   */
  var $_priority;
  /**
   * The event's access level.
   * @var string
   * @access private
   */
  var $_access;
  /**
   * The event's duration in minutes.
   * @var int
   * @access private
   */
  var $_duration;
  /**
   * The event's status.
   * @var string
   * @access private
   */
  var $_status;
  /**
   * The event's category ID.
   * @var int
   * @access private
   */
  var $_category;
  /**
   * The event's owner.
   * @var mixed
   * @access private
   */
  var $_login;
  /**
   * The event's end time .
   * @var mixed
   * @access private
   */
  var $_endTime;
 /**
   * The event's end datetime .
   * @var mixed
   * @access private
   */
  var $_endDateTime;
 /**
   * Is this an All Day event?
   * @var bool
   * @access private
   */
  var $_allDay;
 /**
   * Is this an Untimes event?
   * @var bool
   * @access private
   */
  var $_untimed;

  /**
   * Creates a new Event.
   *
   * @param string $name        Name of the event
   * @param string $description Event's description
   * @param string $date        Event's date (in YYYYMMDD format)
   * @param string $time        Event's time (in HHMMSS format)
   * @param int    $id          Event's ID
   * @param mixed  $extForID    Event's extension ID (or '' for none)
   * @param int    $priority    Event's priority
   * @param string $access      Event's access level
   * @param int    $duration    Event's duration (in minutes)
   * @param string $status      Event's status
   * @param mixed  $category    Event's category ID
   * @param string $login       Event's owner
   *
   * @return Event The new Event
   *
   * @access public
   */
  function Event ( $name, $description, $date, $time, $id, $extForID,
                   $priority, $access, $duration, $status, $category, $login ) {
    $this->_name = $name;
    $this->_description = $description;
    $this->_date = $date;
    $this->_time = $time;
    $this->_DateTime = $date . sprintf ( "%06d", $time );
    $this->_id = $id;
    $this->_extForID = $extForID;
    $this->_priority = $priority;
    $this->_access = $access;
    $this->_duration = $duration;
    $this->_status = $status;
    $this->_category = $category;
    $this->_login = $login;

    // If public access override event name/description is enabled, then
    // hide the event name and description
    if ( $GLOBALS['login'] == '__public__' &&
      ! empty ( $GLOBALS['override_public'] ) &&
      $GLOBALS['override_public'] == 'Y' ) {
      $this->_name = $GLOBALS['override_public_text'];
      $this->_description = $GLOBALS['override_public_text'];
    }
  }

  /**
   * Gets the event's name
   *
   * @return string The event's name
   *
   * @access public
   */
  function getName () {
    return $this->_name;
  }

  /**
   * Gets the event's description
   *
   * @return string The event's description
   *
   * @access public
   */
  function getDescription () {
    return $this->_description;
  }

  /**
   * Gets the event's date
   *
   * @return string The event's date (in YYYYMMDD format)
   *
   * @access public
   */
  function getDate () {
    return $this->_date;
  }

  /**
   * Gets the event's time
   *
   * @return string The event's time (in HHMMSS format)
   *
   * @access public
   */
  function getTime () {
    return $this->_time;
  }
  
    /**
   * Gets the event's date/time
   *
   * @return string The event's date/time (in YYYYMMDDHHMMSS format)
   *
   * @access public
   */
  function getDateTime () {
    return $this->_DateTime;
  }


  /**
   * Gets the event's ID
   *
   * @return int The event's ID
   *
   * @access public
   */
  function getID () {
    return $this->_id;
  }

  /**
   * Gets the event's extension ID
   *
   * @return mixed The event's extension ID (or '' for none)
   *
   * @access public
   */
  function getExtForID () {
    return $this->_extForID;
  }

  /**
   * Gets the event's priority
   *
   * @return int The event's priority
   *
   * @access public
   */
  function getPriority () {
    return $this->_priority;
  }

  /**
   * Gets the event's access level
   *
   * @return string The event's access level
   *
   * @access public
   */
  function getAccess () {
    return $this->_access;
  }

  /**
   * Gets the event's duration
   *
   * @return int The event's duration (in minutes)
   *
   * @access public
   */
  function getDuration () {
    return $this->_duration;
  }

  /**
   * Gets the event's status
   *
   * @return string The event's status
   *
   * @access public
   */
  function getStatus () {
    return $this->_status;
  }

  /**
   * Gets the event's category ID
   *
   * @return mixed The event's category ID (or '' for none)
   *
   * @access public
   */
  function getCategory () {
    return $this->_category;
  }

  /**
   * Gets the event's owner
   *
   * @return string The event's owner
   *
   * @access public
   */
  function getLogin () {
    return $this->_login;
  }
 
   /**
   * Gets the event's end time
   *
   * @return string The event's end time HHMMSS Format
   *
   * @access public
   */
  function getEndTime () {
    $year = substr ( $this->_date, 0, 4 );
    $month = substr ( $this->_date, 4, 2 ); 
    $day = substr ( $this->_date, 6, 2 );
    $h = (int) ( $this->_time / 10000 );
    $m = ( $this->_time / 100 ) % 100;
    $dur = ( $this->_duration > 0 ? $this->_duration : 0 );
    $this->_endTime = date ( "His", mktime ( $h, $m + $dur, 0, $month, $day, $year ) );
    return $this->_endTime;
  }
 
 /**
   * Gets the event's end datetime
   *
   * @return string The event's end datetime YYYYMMSSHHMMSS Format
   *
   * @access public
   */
  function getEndDateTime () {
    $year = substr ( $this->_date, 0, 4 );
    $month = substr ( $this->_date, 4, 2 ); 
    $day = substr ( $this->_date, 6, 2 );
    $h = (int) ( $this->_time / 10000 );
    $m = ( $this->_time / 100 ) % 100;
    $dur = ( $this->_duration > 0 ? $this->_duration : 0 );
    $this->_endDateTime = date ( "YmdHis", mktime ( $h, $m + $dur, 0, $month, $day, $year ) );
    return $this->_endDateTime;
  }

 /**
   * Determine if event is All Day 
   *
   * @return bool True if event is All Day
   *
   * @access public
   */
  function isAllDay () {
   $this->_allDay = ( $this->_time == 0 && $this->_duration == 1440? true : false); 
    return $this->_allDay;
  }
 
 /**
   * Determine if event is Untimed 
   *
   * @return bool True if event is Untimed
   *
   * @access public
   */
  function isUntimed () {
   $this->_untimed = ( $this->_time == -1 && $this->_duration == 0? true : false); 
    return $this->_untimed;
  }

}
?>
