<?php
/* This file loads configuration settings from the data file settings.php and
 * sets up some needed variables.
 *
 * The settings.php file is created during installation using the web-based db
 * setup page (install/index.php).
 *
 * <b>Note:</b>
 * DO NOT EDIT THIS FILE!
 *
 *
 * @author Craig Knudsen <cknudsen@cknudsen.com>
 * @copyright Craig Knudsen, <cknudsen@cknudsen.com>, http://www.k5n.us/cknudsen
 * @license http://www.gnu.org/licenses/gpl.html GNU GPL
 * @version $Id$
 * @package WebCalendar
 */

/* Prints a fatal error message to the user along with a link to the
 * Troubleshooting section of the WebCalendar System Administrator's Guide.
 *
 * Execution is aborted.
 *
 * @param string  $error  The error message to display
 * @internal We don't normally put functions in this file. But, since this
 *           file is included before some of the others, this function either
 *           goes here or we repeat this code in multiple files.
 */
function die_miserable_death ( $error ) {
  global $APPLICATION_NAME, $LANGUAGE, $TROUBLE_URL, $login;
  // Make sure app name is set
  if ( function_exists ( 'generate_application_name' ) ) {
    $appStr = generate_application_name ();
  } else {
    $appStr = ( ! empty ( $APPLICATION_NAME ) ? $APPLICATION_NAME : 'Title' );
  }

  if ( function_exists ( 'translate' ) ) {
    if ( empty ( $LANGUAGE ) )
      load_user_preferences ();

    $title = $appStr . ': ' . translate ( 'Fatal Error' );
    $h2_label = $appStr . ' ' . translate ( 'Error' );
    $trouble_label = translate ( 'Troubleshooting Help' );
    $user_BGCOLOR = get_pref_setting ( $login, 'BGCOLOR' );
  } else {
    $appStr = 'WebCalendar';
    $title = $appStr . ': ' . 'Fatal Error';
    $h2_label = $appStr . ' ' . 'Error';
    $trouble_label = 'Troubleshooting Help';
    $user_BGCOLOR = '#FFFFFF';
  }

  echo <<<EOT
<html>
  <head><title>{$title}</title></head>
  <body bgcolor ="{$user_BGCOLOR}">
    <h2>{$h2_label}</h2>
    <p>{$error}</p><hr />
    <p><a href="{$TROUBLE_URL}" target="_blank">{$trouble_label}</a></p>
  </body>
</html>
EOT;
  exit;
}

function db_error ( $doExit = false, $sql = '' ) {
  global $settings;

  $ret = translate ( 'Database error' ) . ': ' . dbi_error ()
   . ( ! empty ( $settings['mode'] ) && $settings['mode'] == 'dev' && !
    empty ( $sql ) ? '<br />SQL:<br />' . $sql : '' );

  if ( $doExit ) {
    echo $ret;
    exit;
  } else
    return $ret;
}

function do_config ( $fileLoc ) {
  global $PROGRAM_VERSION, $PROGRAM_DATE, $PROGRAM_NAME,
    $PROGRAM_URL, $TROUBLE_URL, $settings, $db_type, $db_host,
    $db_login, $db_password, $db_database, $db_persistent,
    $readonly, $run_mode, $phpdbiVerbose, $single_user,
    $single_user_login, $use_http_auth, $user_inc, $NONUSER_PREFIX;

   $PROGRAM_VERSION = 'v1.1.3';
    $PROGRAM_DATE = '?? ??? 2006 / CVS Snapshot';
    $PROGRAM_NAME = "WebCalendar $PROGRAM_VERSION ($PROGRAM_DATE)";
    $PROGRAM_URL = 'http://www.k5n.us/webcalendar.php';

    $TROUBLE_URL = "docs/WebCalendar-SysAdmin.html#trouble";

    // Open settings file to read
    $settings = array ();
    $fd = @fopen ( $fileLoc, 'rb', true );
    if ( empty ( $fd ) && ! empty ( $includedir ) )
      @fopen ( "$includedir/settings.php", 'rb', true );
    if ( empty ( $fd ) ) {        
      // There is no settings.php file.
      // Redirect user to install page if it exists.
      if ( file_exists ( 'install/index.php' ) ) {
        Header ( 'Location: install/index.php' );
        exit;
      } else {
        die_miserable_death ( "Could not find settings.php file.<br />\n" .
          "Please copy settings.php.orig to settings.php and modify for your " .
          "site.\n" );
      }
    }

    // We don't use fgets() since it seems to have problems with Mac-formatted
    // text files.  Instead, we read in the entire file, then split the lines
    // manually.
    $data = '';
    while ( ! feof ( $fd ) ) {
      $data .= fgets ( $fd, 4096 );
    }
    fclose ( $fd );

    // Replace any combination of carriage return (\r) and new line (\n)
    // with a single new line.
    $data = preg_replace ( "/[\r\n]+/", "\n", $data );

    // Split the data into lines.
    $configLines = explode ( "\n", $data );

    for ( $n = 0; $n < count ( $configLines ); $n++ ) {
      $buffer = $configLines[$n];
      $buffer = trim ( $buffer, "\r\n " );
      if ( preg_match ( "/^#|\/\*/", $buffer ) )
        continue;
      if ( preg_match ( "/^<\?/", $buffer ) ) // start php code
        continue;
      if ( preg_match ( "/^\?>/", $buffer ) ) // end php code
        continue;
      if ( preg_match ( "/(\S+):\s*(\S+)/", $buffer, $matches ) ) {
        $settings[$matches[1]] = $matches[2];
        //echo "settings $matches[1] => $matches[2] <br />";
      }
    }
    $configLines = $data = '';

    // Extract db settings into global vars
    $db_type = $settings['db_type'];
    $db_host = $settings['db_host'];
    $db_login = $settings['db_login'];
    $db_password = $settings['db_password'];
    $db_database = $settings['db_database'];
    $db_persistent = preg_match ( "/(1|yes|true|on)/i",
      $settings['db_persistent'] ) ? '1' : '0';
    // Use 'db_cachedir' if found, otherwise look for 'cachedir'
    if ( ! empty ( $settings['db_cachedir'] ) )
      dbi_init_cache ( $settings['db_cachedir'] );
    else if ( ! empty ( $settings['cachedir'] ) )
      dbi_init_cache ( $settings['cachedir'] );
    if ( ! empty ( $settings['db_debug'] ) ) {
      if ( preg_match ( "/(1|true|yes|enable|on)/i", $settings['db_debug'] ) )
        dbi_set_debug ( true );
    }

    foreach ( array ( 'db_type', 'db_host', 'db_login', 'db_password' ) as $s ) {
      if ( empty ( $settings[$s] ) ) {
        die_miserable_death ( "Could not find <tt>$s</tt> defined in " .
          "your <tt>settings.php</tt> file.\n" );
      }
    }
    
    //Allow special settings of 'none' in some settings[] values
    //this can be used for db servers not using TCP port for connection
    $db_host = ( $db_host == 'none'? '' : $db_host );
    $db_password = ( $db_password == 'none'? '' : $db_password );
        
    $readonly = preg_match ( "/(1|yes|true|on)/i",
      $settings['readonly'] ) ? 'Y' : 'N';

    if ( empty ( $settings['mode'] ) )
      $settings['mode'] = 'prod';
    $run_mode = preg_match ( "/(dev)/i",
      $settings['mode'] ) ? 'dev' : 'prod';

    if ( $run_mode == 'dev' ) {
      $phpdbiVerbose = true;
    }

    $single_user = 'N';
    $single_user = preg_match ( "/(1|yes|true|on)/i",
      $settings['single_user'] ) ? 'Y' : 'N';
    if ( $single_user == 'Y' )
      $single_user_login = $settings['single_user_login'];

    if ( $single_user == 'Y' && empty ( $single_user_login ) ) {
      die_miserable_death ( "You must define <tt>single_user_login</tt> in " .
        "the settings.php file.\n" );
    }


    $use_http_auth = preg_match ( "/(1|yes|true|on)/i",
      $settings['use_http_auth'] ) ? true : false;

    // Type of user authentication
    $user_inc = $settings['user_inc'];

   // Check the current installation version
   // Redirect user to install page if it is different from stored value
   // This will prevent running WebCalendar until UPGRADING.html has been
   // read and required upgrade actions completed
   $c = @dbi_connect ( $db_host, $db_login, $db_password, $db_database, false );
   if ( $c ) {
     $rows = dbi_get_cached_rows ( "SELECT  cal_value FROM webcal_config ".
       "WHERE cal_setting = 'WEBCAL_PROGRAM_VERSION'" );
       if ( ! $rows ) {
           // & does not work here...leave it as &
           Header ( 'Location: install/index.php?action=mismatch&version=UNKNOWN' );
           exit;
       } else {
           $row = $rows[0];
           if (  empty ( $row) || $row[0] != $PROGRAM_VERSION ) {
             // & does not work here...leave it as &
             $version = ( empty ($row )? "UNKNOWN" : $row[0] );
            Header ( "Location: install/index.php?action=mismatch&version=$version" );
             exit;
           }
       }
       dbi_close ( $c );
    } else { //must mean we don't have a settings.php file
        // & does not work here...leave it as &
        Header ( 'Location: install/index.php?action=mismatch&version=UNKNOWN' );
        exit;
    }


    // We can add extra 'nonuser' calendars such as a corporate calendar,
    // holiday calendar, departmental calendar, etc.  We need a unique prefix
    // for these calendars as not to get mixed up with real logins.  This prefix
    // should be a Maximum of 5 characters and should NOT change once set!
    $NONUSER_PREFIX = '_NUC_';


    if ( $single_user != 'Y' )
      $single_user_login = '';

}
?>
